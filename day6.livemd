<!-- livebook:{"file_entries":[{"name":"day6_example.txt","type":"attachment"},{"name":"day6_input.txt","type":"attachment"}]} -->

# Day 6

```elixir
Mix.install([
  {:kino, "~> 0.14.2"}
])
```

## Part 1

```elixir
matrix = Kino.FS.file_path("day6_input.txt")
  |> File.read!()
  |> String.trim()
  |> String.split("\n")
  |> Enum.map(&String.graphemes/1)

matrix_to_map = fn matrix ->
  row_count = length(matrix) - 1
  col_count = length(Enum.at(matrix, 0)) - 1

  Enum.flat_map(0..row_count, fn row ->
    Enum.map(0..col_count, fn col ->
      {
        {row, col},
        Enum.at(matrix, row) |> Enum.at(col)
      }
    end)
  end)
  |> Enum.into(%{})
end

grid = matrix_to_map.(matrix)
```

```elixir
defmodule GuardMover do
  def next_pos({r, c}, direction) do
    case direction do
      "^" -> {r - 1, c}
      "<" -> {r, c - 1}
      ">" -> {r, c + 1}
      "v" -> {r + 1, c}
    end
  end

  def turn_right(direction) do
    case direction do
      "^" -> ">"
      "<" -> "^"
      ">" -> "v"
      "v" -> "<"
    end
  end

  def walk_grid(grid, position, direction) do
    grid = Map.put(grid, position, :x)
    
    {new_position, new_direction} = move_guard(grid, position, direction)
    if new_position == nil, do: grid, else: walk_grid(grid, new_position, new_direction)
  end
  
  def move_guard(grid, position, direction) do
    try_position = next_pos(position, direction)
    
    case Map.get(grid, try_position, nil) do
      "#" ->
        new_direction = turn_right(direction)
        new_position = next_pos(position, new_direction)
        {new_position, new_direction}
      nil -> 
        {nil, nil}
      _ -> {try_position, direction}
    end
  end
end

{guard_pos, dir} = Map.filter(grid, fn {_, value} -> value in ["^", "<", ">", "v"] end)
  |> Map.to_list()
  |> Enum.at(0)

end_grid = GuardMover.walk_grid(grid, guard_pos, dir)

count = Map.filter(end_grid, fn {_, value} -> value == :x end)
  |> Enum.count()
```

## Part 2

```elixir
def GuardLooper do
  import GuardMover
end
```
