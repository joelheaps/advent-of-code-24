<!-- livebook:{"file_entries":[{"name":"day6_example.txt","type":"attachment"},{"name":"day6_input.txt","type":"attachment"},{"name":"day7-ex.txt","type":"attachment"},{"name":"day7-in.txt","type":"attachment"}]} -->

# Day 7

```elixir
Mix.install([
  {:kino, "~> 0.14.2"}
])
```

## Part 1

```elixir
calibrations = Kino.FS.file_path("day7-in.txt")
  |> File.read!()
  |> String.trim()
  |> String.split("\n")
  |> Enum.map(fn line ->
      {cal, nums} = String.split(line, ":", trim: true)
        |> List.to_tuple()
      cal = String.to_integer(cal)
      nums = String.trim(nums) |> String.split() |> Enum.map(&String.to_integer/1)
      {cal, nums}
    end)
```

```elixir
defmodule Mathinator do
  def try_operators(values), do: Enum.reverse(values) |> do_try_operators()
  defp do_try_operators([number]), do: [number]
  defp do_try_operators([first | rest]) do
    result_mult = for number <- do_try_operators(rest), do: first * number
    result_add = for number <- do_try_operators(rest), do: first + number
    result_mult ++ result_add
  end
end

result = calibrations
  |> Enum.filter(fn {result, values} ->
    result in Mathinator.try_operators(values)
  end)
  |> Enum.map(fn {result, _} -> result end)
  |> Enum.sum()
```

## Part 2

```elixir
defmodule Mathinator2 do
  def try_operators(values), do: Enum.reverse(values) |> do_try_operators()
  defp do_try_operators([number]), do: [number]
  defp do_try_operators([first | rest]) do
    result_mult = for number <- do_try_operators(rest), do: first * number
    result_add = for number <- do_try_operators(rest), do: first + number
    result_concat = for number <- do_try_operators(rest), do:
      Integer.to_string(number) <> Integer.to_string(first) |> String.to_integer()

    result_mult ++ result_add ++ result_concat
  end
end

result = calibrations
  |> Enum.filter(fn {result, values} ->
    result in Mathinator2.try_operators(values)
  end)
  |> Enum.map(fn {result, _} -> result end)
  |> Enum.sum()
```
