# Day 1

## Part 1

```elixir
input = """
3   4
4   3
2   5
1   3
3   9
3   3
"""
```

```elixir
pairs = String.split(input, "\n")
split_pairs = Enum.map(pairs, fn pairs -> String.split(pairs) end)

defmodule Parser do
  def parse_lists(pairs) do
    do_parse_lists(pairs, [], [])
  end
  
  defp do_parse_lists([[]], list_a, list_b), do: {list_a, list_b}
  
  defp do_parse_lists([[a | [b]] | pairs], list_a, list_b) do
    a = String.to_integer(a)
    b = String.to_integer(b)
    do_parse_lists(pairs, [a | list_a], [b | list_b])
  end
end

{list_a, list_b} = Parser.parse_lists(split_pairs)
```

```elixir
{list_a, list_b} = {Enum.sort(list_a), Enum.sort(list_b)}
```

```elixir
defmodule Differ do
  def diff(list_a, list_b, diff \\ 0)
  
  def diff([], [], diff), do: diff
  
  def diff([elem_a | list_a], [elem_b | list_b], diff) do
    diff = abs(elem_a - elem_b) + diff
    diff(list_a, list_b, diff)
  end
end

diff = Differ.diff(list_a, list_b)
```

## Part 2

```elixir
frequencies = Enum.frequencies(list_b)
sum = Enum.map(list_a, fn elem -> elem * Map.get(frequencies, elem, 0) end) 
  |> Enum.sum()
```
